using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MooPromise
{
    public interface IPromiseEnumerable<T>
    {
        IPromiseEnumerable<T> Where(Func<T, int, IPromise<bool>> action);
        IPromiseEnumerable<T> Where(Func<T, int, bool> action);
        IPromiseEnumerable<T> Where(Func<T, IPromise<bool>> action);
        IPromiseEnumerable<T> Where(Func<T, bool> action);
        IPromiseEnumerable<E> Select<E>(Func<T, int, IPromise<E>> action);
        IPromiseEnumerable<E> Select<E>(Func<T, int, E> action);
        IPromiseEnumerable<E> Select<E>(Func<T, IPromise<E>> action);
        IPromiseEnumerable<E> Select<E>(Func<T, E> action);
        IPromiseEnumerable<T> TakeWhile(Func<T, int, IPromise<bool>> action);
        IPromiseEnumerable<T> TakeWhile(Func<T, int, bool> action);
        IPromiseEnumerable<T> TakeWhile(Func<T, IPromise<bool>> action);
        IPromiseEnumerable<T> TakeWhile(Func<T, bool> action);
        IPromiseEnumerable<T> Take(int count);
        IPromiseEnumerable<T> SkipWhile(Func<T, int, IPromise<bool>> action);
        IPromiseEnumerable<T> SkipWhile(Func<T, int, bool> action);
        IPromiseEnumerable<T> SkipWhile(Func<T, IPromise<bool>> action);
        IPromiseEnumerable<T> SkipWhile(Func<T, bool> action);
        IPromiseEnumerable<T> Skip(int count);
        IPromise<bool> Empty();
        IPromise<bool> Empty(Func<T, int, IPromise<bool>> action);
        IPromise<bool> Empty(Func<T, int, bool> action);
        IPromise<bool> Empty(Func<T, IPromise<bool>> action);
        IPromise<bool> Empty(Func<T, bool> action);
        IPromise<bool> Any(Func<T, int, IPromise<bool>> action);
        IPromise<bool> Any(Func<T, int, bool> action);
        IPromise<bool> Any(Func<T, IPromise<bool>> action);
        IPromise<bool> Any(Func<T, bool> action);
        IPromise<bool> Exists(Func<T, int, IPromise<bool>> action);
        IPromise<bool> Exists(Func<T, int, bool> action);
        IPromise<bool> Exists(Func<T, IPromise<bool>> action);
        IPromise<bool> Exists(Func<T, bool> action);
        IPromise<bool> Any();
        IPromise<bool> Exists();
        IPromise<T> FirstOrDefault();
        IPromise<T> FirstOrDefault(T defaultValue);
        IPromise<T> FirstOrDefault(Func<T, int, IPromise<bool>> predicate, T defaultValue);
        IPromise<T> FirstOrDefault(Func<T, int, bool> predicate, T defaultValue);
        IPromise<T> FirstOrDefault(Func<T, IPromise<bool>> predicate, T defaultValue);
        IPromise<T> FirstOrDefault(Func<T, bool> predicate, T defaultValue);
        IPromise<T> FirstOrDefault(Func<T, int, IPromise<bool>> predicate);
        IPromise<T> FirstOrDefault(Func<T, int, bool> predicate);
        IPromise<T> FirstOrDefault(Func<T, IPromise<bool>> predicate);
        IPromise<T> FirstOrDefault(Func<T, bool> predicate);
        IPromise<T> First();
        IPromise<T> First(Func<T, int, IPromise<bool>> predicate);
        IPromise<T> First(Func<T, int, bool> predicate);
        IPromise<T> First(Func<T, IPromise<bool>> predicate);
        IPromise<T> First(Func<T, bool> predicate);
        IPromise<T> SingleOrDefault();
        IPromise<T> Single();
        IPromise<T> SingleOrDefault(T defaultValue);
        IPromise<T> SingleOrDefault(Func<T, int, IPromise<bool>> predicate, T defaultValue);
        IPromise<T> SingleOrDefault(Func<T, int, bool> predicate, T defaultValue);
        IPromise<T> SingleOrDefault(Func<T, IPromise<bool>> predicate, T defaultValue);
        IPromise<T> SingleOrDefault(Func<T, bool> predicate, T defaultValue);
        IPromise<T> SingleOrDefault(Func<T, int, IPromise<bool>> predicate);
        IPromise<T> SingleOrDefault(Func<T, int, bool> predicate);
        IPromise<T> SingleOrDefault(Func<T, IPromise<bool>> predicate);
        IPromise<T> SingleOrDefault(Func<T, bool> predicate);
        IPromise<T> Single(Func<T, int, IPromise<bool>> predicate);
        IPromise<T> Single(Func<T, int, bool> predicate);
        IPromise<T> Single(Func<T, IPromise<bool>> predicate);
        IPromise<T> Single(Func<T, bool> predicate);
        IPromiseEnumerable<T> DefaultIfEmpty(T defaultValue);
        IPromiseEnumerable<T> DefaultIfEmpty();
        IPromise<T> LastOrDefault();
        IPromise<T> LastOrDefault(T defaultValue);
        IPromise<T> LastOrDefault(Func<T, int, IPromise<bool>> predicate, T defaultValue);
        IPromise<T> LastOrDefault(Func<T, int, bool> predicate, T defaultValue);
        IPromise<T> LastOrDefault(Func<T, IPromise<bool>> predicate, T defaultValue);
        IPromise<T> LastOrDefault(Func<T, bool> predicate, T defaultValue);
        IPromise<T> LastOrDefault(Func<T, int, IPromise<bool>> predicate);
        IPromise<T> LastOrDefault(Func<T, int, bool> predicate);
        IPromise<T> LastOrDefault(Func<T, IPromise<bool>> predicate);
        IPromise<T> LastOrDefault(Func<T, bool> predicate);
        IPromise<T> Last();
        IPromise<T> Last(Func<T, int, IPromise<bool>> predicate);
        IPromise<T> Last(Func<T, int, bool> predicate);
        IPromise<T> Last(Func<T, IPromise<bool>> predicate);
        IPromise<T> Last(Func<T, bool> predicate);
        IPromiseEnumerable<T> Concat(IPromiseEnumerable<T> other);
        IPromiseEnumerable<T> Concat(IEnumerable<T> other);
        IPromiseEnumerable<T> Concat(IPromise<IEnumerable<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<ICollection<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<IList<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<ISet<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<T[]> other);
        IPromiseEnumerable<T> Concat(IPromise<List<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<HashSet<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<SortedSet<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<LinkedList<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<Stack<T>> other);
        IPromiseEnumerable<T> Concat(IPromise<Queue<T>> other);
        IPromiseEnumerable<T> Reverse();
        IPromise<E> Aggregate<E>(Func<E, T, int, IPromise<E>> action, E seed);
        IPromise<E> Aggregate<E>(Func<E, T, int, E> action, E seed);
        IPromise<E> Aggregate<E>(Func<E, T, IPromise<E>> action, E seed);
        IPromise<E> Aggregate<E>(Func<E, T, E> action, E seed);
        IPromise<E> Aggregate<E>(Func<E, T, int, IPromise<E>> action);
        IPromise<E> Aggregate<E>(Func<E, T, int, E> action);
        IPromise<E> Aggregate<E>(Func<E, T, IPromise<E>> action);
        IPromise<E> Aggregate<E>(Func<E, T, E> action);
        IPromise Each(Func<T, int, IPromise> action);
        IPromise Each(Action<T, int> action);
        IPromise Each(Func<T, IPromise> action);
        IPromise Each(Action<T> action);
        IPromise<long> LongCount(Func<T, int, IPromise<bool>> filter);
        IPromise<long> LongCount(Func<T, int, bool> filter);
        IPromise<long> LongCount(Func<T, IPromise<bool>> filter);
        IPromise<long> LongCount(Func<T, bool> filter);
        IPromise<long> LongCount();
        IPromise<int> Count(Func<T, int, IPromise<bool>> filter);
        IPromise<int> Count(Func<T, int, bool> filter);
        IPromise<int> Count(Func<T, IPromise<bool>> filter);
        IPromise<int> Count(Func<T, bool> filter);
        IPromise<int> Count();
        IPromise<int> Sum(Func<T, int, IPromise<int>> action);
        IPromise<int> Sum(Func<T, int, int> action);
        IPromise<int> Sum(Func<T, IPromise<int>> action);
        IPromise<int> Sum(Func<T, int> action);
        IPromise<long> Sum(Func<T, int, IPromise<long>> action);
        IPromise<long> Sum(Func<T, int, long> action);
        IPromise<long> Sum(Func<T, IPromise<long>> action);
        IPromise<long> Sum(Func<T, long> action);
        IPromise<float> Sum(Func<T, int, IPromise<float>> action);
        IPromise<float> Sum(Func<T, int, float> action);
        IPromise<float> Sum(Func<T, IPromise<float>> action);
        IPromise<float> Sum(Func<T, float> action);
        IPromise<double> Sum(Func<T, int, IPromise<double>> action);
        IPromise<double> Sum(Func<T, int, double> action);
        IPromise<double> Sum(Func<T, IPromise<double>> action);
        IPromise<double> Sum(Func<T, double> action);
        IPromise<decimal> Sum(Func<T, int, IPromise<decimal>> action);
        IPromise<decimal> Sum(Func<T, int, decimal> action);
        IPromise<decimal> Sum(Func<T, IPromise<decimal>> action);
        IPromise<decimal> Sum(Func<T, decimal> action);
        IPromise<double> Average(Func<T, int, IPromise<int>> action);
        IPromise<double> Average(Func<T, int, int> action);
        IPromise<double> Average(Func<T, IPromise<int>> action);
        IPromise<double> Average(Func<T, int> action);
        IPromise<double> Average(Func<T, int, IPromise<long>> action);
        IPromise<double> Average(Func<T, int, long> action);
        IPromise<double> Average(Func<T, IPromise<long>> action);
        IPromise<double> Average(Func<T, long> action);
        IPromise<double> Average(Func<T, int, IPromise<float>> action);
        IPromise<double> Average(Func<T, int, float> action);
        IPromise<double> Average(Func<T, IPromise<float>> action);
        IPromise<double> Average(Func<T, float> action);
        IPromise<double> Average(Func<T, int, IPromise<double>> action);
        IPromise<double> Average(Func<T, int, double> action);
        IPromise<double> Average(Func<T, IPromise<double>> action);
        IPromise<double> Average(Func<T, double> action);
        IPromise<double> Average(Func<T, int, IPromise<decimal>> action);
        IPromise<double> Average(Func<T, int, decimal> action);
        IPromise<double> Average(Func<T, IPromise<decimal>> action);
        IPromise<double> Average(Func<T, decimal> action);
        IPromiseEnumerable<T> Distinct(IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Distinct();
        IPromiseEnumerable<T> Union(IPromiseEnumerable<T> items, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromiseEnumerable<T> items);
        IPromiseEnumerable<T> Union(IEnumerable<T> other);
        IPromiseEnumerable<T> Union(IPromise<IEnumerable<T>> other);
        IPromiseEnumerable<T> Union(IPromise<ICollection<T>> other);
        IPromiseEnumerable<T> Union(IPromise<IList<T>> other);
        IPromiseEnumerable<T> Union(IPromise<ISet<T>> other);
        IPromiseEnumerable<T> Union(IPromise<T[]> other);
        IPromiseEnumerable<T> Union(IPromise<List<T>> other);
        IPromiseEnumerable<T> Union(IPromise<HashSet<T>> other);
        IPromiseEnumerable<T> Union(IPromise<SortedSet<T>> other);
        IPromiseEnumerable<T> Union(IPromise<LinkedList<T>> other);
        IPromiseEnumerable<T> Union(IPromise<Stack<T>> other);
        IPromiseEnumerable<T> Union(IPromise<Queue<T>> other);
        IPromiseEnumerable<T> Union(IEnumerable<T> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<IEnumerable<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<ICollection<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<IList<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<ISet<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<T[]> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<List<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<HashSet<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<SortedSet<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<LinkedList<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<Stack<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<T> Union(IPromise<Queue<T>> other, IEqualityComparer<T> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, int, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, int, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, int, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, int, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, int, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, int, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, int, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, int, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, IPromise<TValue>> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, TValue> value, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, int, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, int, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, int, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, int, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, IPromise<TKey>> key, Func<T, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, int, TKey> key, Func<T, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, int, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, int, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, int, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, int, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, IPromise<TKey>> key, Func<T, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, IPromise<TValue>> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, TValue>> GroupBy<TKey, TValue>(Func<T, TKey> key, Func<T, TValue> value);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, int, IPromise<TKey>> key, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, int, TKey> key, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, IPromise<TKey>> key, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, TKey> key, IEqualityComparer<TKey> comparer);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, int, IPromise<TKey>> key);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, int, TKey> key);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, IPromise<TKey>> key);
        IPromiseEnumerable<IPromiseGrouping<TKey, T>> GroupBy<TKey>(Func<T, TKey> key);
        IPromise<List<T>> ToList();
        IPromise Then(Action action);
        IPromise<F> Then<F>(Func<F> action);
        IPromise Then(Func<IPromise> action);
        IPromise<F> Then<F>(Func<IPromise<F>> action);
        IPromise Catch(Action<Exception> action);
        IPromise Catch(Action action);
        IPromise Finally(Action<Exception> action);
        IPromise Finally(Action action);
        PromiseFactory Factory { get; }
    }
}
